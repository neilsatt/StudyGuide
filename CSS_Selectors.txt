----------------------------------------
Selectors - Beyond the Basics
----------------------------------------

The > combinator targets a direct child of an element (child selector)

The + combinator targets an element's immediate sibling (adjacent sibling)

The ~ combinator targets all the specified siblings that follow an element (general siblings)

// anchor elements that are direct children of a form
form > a {
    font-size: .7em;
}

// target button elements that immmediatly follow another btn element
.btn + .btn {
    margin-left: 20px;
}


// target immmediate sibling and every sibling that follows
// target every sibling label element, that follows an h1

h1 ~ label {
    background: tomato;
}

REVIEW 
Attribute selectors can target an element by any of its HTML attributes

We can define specific child and sibling selectors with combinators


-------------------------------------------------
Attribute Selectors and Pseudo-Classes
-------------------------------------------------
// Targeting first and last child elements

:first-child and :last:child

div:first-child {
  margin-left: 0;
}

li:last-child {
  float: right;
}

// Targeting only-child and empty elements
div span:only-child {
  font-size: .5em;
}

:empty {
  background: red;
}

:only-child {

}



---------------------------------------------------------------------------
Substring Matching Attribute Selectors - "Begins With" and "Ends With"
---------------------------------------------------------------------------
^ tells the browser to match a piece of code that’s at the beginning of an attribute's value

$ matches a piece at the end of an attribute's value

* matches any part of an attribute's value

a[href^="http://"]{
    color: #52bab3;
    text-decoration: none;
}

a[href$=".html"] {
    text-decoration: none;
}

---------------------------------------------------------------------------
Substring Matching Attribute Selectors - "Contains"
---------------------------------------------------------------------------

a[href*="downloads"] {
    background-repeat: no-repeat;
}

img[src*="thumb"] {
    margin: 4px;
    border: solid 2px;
    width: 180px;
    height: 140px;
}

img[src*="lake"]{
 border-color: lake;
}

-----------------------------------------------------------------------------
Usage for these selectors
    When a CMS or framework allows no access to HTML
    When we are unable to add classes or IDs to element
-----------------------------------------------------------------------------

------------------------------------------------------------------------------
Element States Pseudo-Classes
------------------------------------------------------------------------------
To target a disabled input element, we can write:

input:disabled {
  background-color: grey;
}

To target a radio button or checkbox when checked, we can write:
:checked {
  border-color: red;
}

input:focus,
textarea:focus {
    border-color: #53bab3;
}


input[type="checkbox"]:checked + label {
    font-weight:bold;
}

--------------------------------------------
REVIEW
--------------------------------------------

:first-child and :last-child select the first and last children of a parent

:only-child targets elements with no siblings

:empty targets elements with no children or content

substring matching attribute selectors match specific pieces of an attribute's value



-------------------------------------------------------------------------
:nth-child  - targets child elements based on any position inside a parent
-------------------------------------------------------------------------

target even li elements in a parent
li:nth-child(even) {
  background: blue;
  color: white;
}

li:nth-child(2n+3) -- select every 2nd list item, starting with the 3rd in the list

li:nth-child(-n+3) -- select 3rd item and everything before it


---------------------------------------------------------------------------------------------------------
:nth-of-type - targets an element based on its position within a parent, but only if it’s a specific type of element.
----------------------------------------------------------------------------------------------------------
targets the 4th div inside the parent, no matter what type of child elements come before it

div:nth-of-type(4) {
  background: #52bab3;
  color: white;
}
